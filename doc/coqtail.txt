*coqtail.txt*	Interactive Coq Proofs in Vim

Author:  Wolf Honore
License: MIT (see LICENSE)

Coqtail provides an interface to Coqtop to enable interactive Coq proof
development. Coqtail uses a separate instance of Coqtop for each buffer, so
you can have multiple open Coq sessions and switch between them seamlessly
using standard Vim methods (e.g., the |argument-list| or |buffer-list|).

1. Starting and Stopping Coqtail	|coqtail-start-stop|
2. Movement Commands			|coqtail-movement|
3. Coq Queries				|coqtail-queries|
4. Panel Management			|coqtail-panels|
5. Configuration			|coqtail-configuration|
6. Debugging				|coqtail-debug|

=============================
Starting and Stopping Coqtail				    *coqtail-start-stop*

					    *<leader>cc* *:CoqStart* *coqtail-start*
:CoqStart	or
<leader>cc		Start the plugin. Spawn Coqtop in the background and
			open two windows on the right of the screen for the
			Goal and Info panels.

					      *<leader>cq* *:CoqStop* *coqtail-stop*
:CoqStop	or
<leader>cq		Stop the plugin. Stop Coqtop and close the Goal and
			Info panels.

					*CTRL-C* *:CoqInterrupt* *coqtail-interrupt*
:CoqInterrupt	or
CTRL-C			Send SIGINT to Coqtop and clear any pending commands.

=================
Movement Commands					      *coqtail-movement*

					      *<leader>cj* *i_<leader>cj* *:CoqNext*
								  *coqtail-next*
:[count]CoqNext	or
[count]<leader>cj	Submit the next [count] sentences to Coqtop for
			checking. If successful, highlight the sentences and
			update the Goal and Info panels accordingly. Otherwise,
			highlight the error and display the error message in
			the Info panel.

			[count] default: 1.

					      *<leader>ck* *i_<leader>ck* *:CoqUndo*
								  *coqtail-undo*
:[count]CoqUndo	or
[count]<leader>ck	Rewind by [count] steps. Un-highlight the previous
			sentences and update the Goal and Info panels.

			[count] default: 1.

					    *<leader>cl* *i_<leader>cl* *:CoqToLine*
							       *coqtail-to-line*
:[count]CoqToLine or
[count]<leader>cl	Check/rewind all sentences up to the end of line
			[count]. If no [count] is given, use the cursor
			position instead. For example, given the line below,
			where '^' represents the cursor position, `:CoqToLine`
			will position the end of the checked section just after
			'1' whereas `:27CoqToLine` will put it after '2'. >
    line 27:	   Let x := 1.^Let y := 2.
<
					     *<leader>cT* *i_<leader>cT* *:CoqToTop*
								*coqtail-to-top*
:CoqToTop	or
<leader>cT		Rewind to the top of the file. Unlike `:1CoqToLine`
			it rewinds to the beginning of the line.

						      *<leader>cG* *:CoqJumpToEnd*
							   *coqtail-jump-to-end*
:CoqJumpToEnd	or
<leader>cG		Move the cursor to the end of the checked region. This
			does not move the checked region.

				       *<leader>cg* *:CoqGotoDef* *coqtail-goto-def*
:CoqGotoDef[!] {arg}
<leader>cg		Populate the |quickfix| list with possible locations
			of the definition of a Coq term and try to jump to
			the first one. If jumping is impossible open the
			|quickfix-window| instead. The first version uses
			{arg}, while the second uses the term under the cursor.
			If |'tagfunc'| is supported then the usual tag
			commands will also work (|:tag|, |CTRL-]|, etc).

===========
Coq Queries						       *coqtail-queries*

							    *:Coq* *coqtail-query*
:Coq {args}		Send an arbitrary query to Coqtop and write the
			response to the Info panel. Commands and mappings for
			the common queries are listed below.

						     *<leader>cs* *coqtail-search*
:Coq Search {arg}
<leader>cs		The first version uses {arg}, while the second uses the
			term under the cursor or the highlighted range in
			visual mode.

						      *<leader>ch* *coqtail-check*
:Coq Check {arg}
<leader>ch

						      *<leader>ca* *coqtail-about*
:Coq About {arg}
<leader>ca

						      *<leader>cp* *coqtail-print*
:Coq Print {arg}
<leader>cp

						     *<leader>cf* *coqtail-locate*
:Coq Locate {arg}
<leader>cf

================
Panel Management						*coqtail-panels*

						  *<leader>cr* *:CoqRestorePanels*
							*coqtail-restore-panels*
:CoqRestorePanels
<leader>cr		Re-open the Goal and Info panels in their original
			configuration.

						      *<leader>cgg* *:CoqGotoGoal*
						       *coqtail-goto-goal-start*
:[count]CoqGotoGoal
<count><leader>cgg	Scroll the Goal panel to the start of goal [count].
			Control the number of goal lines to display with
			|g:coqtail_goal_lines|.

			[count] default: 1.

						     *<leader>cGG* *:CoqGotoGoal!*
							 *coqtail-goto-goal-end*
:[count]CoqGotoGoal!
<count><leader>cGG	Same as `:CoqGotoGoal` but scroll to the end of the
			goal.

							   *g]* *:CoqGotoGoalNext*
						  *coqtail-goto-goal-next-start*
:CoqGotoGoalNext
g]			Scroll the Goal panel to the start of the next goal.

							  *G]* *:CoqGotoGoalNext!*
						    *coqtail-goto-goal-next-end*
:CoqGotoGoalNext!
G]			Scroll the Goal panel to the end of the next goal.

							   *g[* *:CoqGotoGoalPrev*
						  *coqtail-goto-goal-prev-start*
:CoqGotoGoalPrev
g[			Scroll the Goal panel to the start of the previous
			goal.

							  *G[* *:CoqGotoGoalPrev!*
						    *coqtail-goto-goal-prev-end*
:CoqGotoGoalPrev!
G[			Scroll the Goal panel to the end of the previous goal.

=============
Configuration						 *coqtail-configuration*

				         *g:coqtail_coq_path* *b:coqtail_coq_path*
							      *coqtail-coq-path*
g:coqtail_coq_path
b:coqtail_coq_path	The path to search for the coq(ide)top(.opt) binary. If
			empty then $PATH is used.

			Default: ''

				         *g:coqtail_coq_prog* *b:coqtail_coq_prog*
							      *coqtail-coq-prog*
g:coqtail_coq_prog
b:coqtail_coq_prog	The name of the Coq executable to run. If empty then it
			defaults to coqtop or coqidetop depending on the Coq
			version. For example, to use the HoTT library: >
		    let b:coqtail_coq_path = '/path/to/HoTT'
		    let b:coqtail_coq_prog = 'hoqidetop'
<
			Default: ''

				       *g:coqtail_goal-lines* *coqtail-goal-lines*
g:coqtail_goal_lines	The number of lines from the start of a goal to
			display. Used by `:CoqGotoGoal`.

			Default: 5.

					     *b:coqtail_timeout* *coqtail-timeout*
b:coqtail_timeout	The time in seconds before interrupting Coqtop after
			issuing a command. A value of 0 disables the timeout.
			Coqtail can also be manually interrupted with
			`:CoqInterrupt`.

			Default: 0

				     *g:coqtail_project_names* *coq-project-files*
g:coqtail_project_names	The names of Coq project files to search for. The search
			begins in the current directory and proceeds upwards.
			If found, project files are parsed and passed as
			arguments to Coqtop by `:CoqStart`.

			Default: ['_CoqProject']

						       *b:coqtail_project_files*
b:coqtail_project_files	Paths to the Coq project files found during `:CoqStart`.

				   *g:coqtail_map_prefix* *coqtail-mapping-prefix*
g:coqtail_map_prefix	The character(s) to begin Coqtail mappings.

			Default: '<leader>c'

			   *g:coqtail_imap_prefix* *coqtail-insert-mapping-prefix*
g:coqtail_imap_prefix	The character(s) to begin Coqtail insert-mode
			mappings. Takes precedence over |g:coqtail_map_prefix|.

			Default: |g:coqtail_map_prefix|

					    *g:coqtail_nomap* *coqtail-no-mapping*
g:coqtail_nomap		If true then don't set any default mappings for
			Coqtail	commands. Specific mappings can also be
			overwritten by defining new mappings for the desired
			commands. The defaults will continue to be used for the
			rest.

			Default: 0

				    *g:coqtail_noimap* *coqtail-no-insert-mapping*
g:coqtail_noimap	If true then don't set insert-mode mappings for
			Coqtail	commands.

			Default: 0

					  *g:coqtail_nosyntax* *coqtail-no-syntax*
g:coqtail_nosyntax	If true then don't load the syntax script included with
			Coqtail.

			Default: 0

					  *g:coqtail_noindent* *coqtail-no-indent*
g:coqtail_noindent	If true then don't load the indent script included with
			Coqtail.

			Default: 0

				     *g:coqtail_match_shift* *coqtail-match-shift*
g:coqtail_match_shift	A multiple of 'shiftwidth' to indent lines in a match
			branch. E.g. >
		    match b with
		    | true =>
		      1 (* g:coqtail_match_shift = 1 *)
		    | false =>
			2 (* g:coqtail_match_shift = 2 *)
		    end
<
			Default: 2

				 *g:coqtail_indent_on_dot* *coqtail-indent-on-dot*
g:coqtail_indent_on_dot	If true then trigger auto-indentation when a '.' is
			typed.

			Default: 0

							  *g:CoqtailHighlight()*
g:CoqtailHighlight()	Optional function to override the default highlighting
			for CoqtailChecked and CoqtailSent. E.g.  >
		    function! g:CoqtailHighlight()
		      hi def CoqtailChecked ctermbg=19
		      hi def CoqtailSent ctermbg=62
		    endfunction
<
=========
Debugging							 *coqtail-debug*

			       *<leader>cd* *:CoqToggleDebug* *coqtail-toggle-debug*
:CoqToggleDebug
<leader>cd		Enable or disable logging of debugging statements to a
			file. Enabling creates a temporary file and displays
			the name in the Info panel. The name is also stored in
			|b:coqtail_log_name|. Disabling and enabling again
			creates a new log file. Disabled initially.

					   *b:coqtail_log_name* *coqtail-log-name*
b:coqtail_log_name	The name of the debugging log file. Set automatically
			by enabling/disabling debugging with `:CoqToggleDebug`.

			Default: ''.

 vim:tw=78:ts=8:ft=help:norl:noet
