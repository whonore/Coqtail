*coqtail.txt*	Interactive Coq Proofs in Vim

Author:  Wolf Honore
License: MIT (see LICENSE)

Coqtail provides an interface to the Coqtop program to allow interactive
theorem proving. Coqtail uses a separate instance of Coqtop for each buffer, so
you can have multiple Coq files open and switch between them seamlessly using
the |arglist| or |buffer-list|.

1. Starting and Stopping Coqtail	|coqtail-start-stop|
2. Movement Commands			|coqtail-movement|
3. Coq Queries				|coqtail-queries|
4. Goal Focusing			|coqtail-goal-focus|
5. Miscellaneous Commands		|coqtail-misc|
6. Configuration			|coqtail-configuration|
7. Debugging				|coqtail-debug|

=============================
Starting and Stopping Coqtail				    *coqtail-start-stop*

					    *<leader>cc* *:CoqStart* *coqtail-start*
:CoqStart	or
<leader>cc		Start the plugin. Spawn Coqtop in the background and
			open two windows on the right of the screen for the
			Goal and Info panels.

					      *<leader>cq* *:CoqStop* *coqtail-stop*
:CoqStop	or
<leader>cq		Stop the plugin. Stop Coqtop and close the Goal and
			Info panels.

=================
Movement Commands					      *coqtail-movement*

					      *<leader>cj* *i_<leader>cj* *:CoqNext*
								  *coqtail-next*
:[count]CoqNext	or
[count]<leader>cj	Submit the next [count] sentences to Coqtop for
			checking. If successful, highlight the sentences and
			update the Goal and Info panels accordingly. Otherwise,
			highlight the error and display the error message in
			the Info panel. [count] defaults to 1.

					      *<leader>ck* *i_<leader>ck* *:CoqUndo*
								  *coqtail-undo*
:[count]CoqUndo	or
[count]<leader>ck	Rewind by [count] steps. Un-highlight the previous
			sentences and update the Goal and Info panels. [count]
			defaults to 1.

					    *<leader>cl* *i_<leader>cl* *:CoqToLine*
							       *coqtail-to-line*
:[count]CoqToLine or
[count]<leader>cl	Check/rewind all sentences up to line [count]. If
			multiple sentences end on the same line then check
			until just past the last one. However, if no [count] is
			given, use the cursor position instead, including the
			column. For example, given the line below, where '^'
			represents the cursor position, `:CoqToLine` would
			position the end of the checked section just after '1'
			whereas `:27CoqToLine` would put it after '2'. >
    line 27:	   Let x := 1.^Let y := 2.
<
					     *<leader>cT* *i_<leader>cT* *:CoqToTop*
								*coqtail-to-top*
:CoqToTop	or
<leader>cT		Rewind to the top of the file. Differs from
			`:1CoqToLine` because it rewinds to the beginning of
			the line.

						      *<leader>cG* *:CoqJumpToEnd*
							   *coqtail-jump-to-end*
:CoqJumpToEnd	or
<leader>cG		Move the cursor to the end of the checked region. This
			does not move the checked region.

				       *<leader>cg* *:CoqGotoDef* *coqtail-goto-def*
:CoqGotoDef[!] {arg}
<leader>cg		Populate the |quickfix| list with possible locations
			of the definition of a Coq term and try to jump to
			the first one. If jumping is impossible open the
			|quickfix-window| instead. The first version uses
			{arg}, while the second uses the term under the cursor.
			If |'tagfunc'| is supported then the usual tag
			commands will also work (|:tag|, |CTRL-]|, etc).

===========
Coq Queries						       *coqtail-queries*

							    *:Coq* *coqtail-query*
:Coq {args}		Send an arbitrary query to Coqtop. Some of the common
			queries are listed below.

					       *<leader>cs* *coqtail-search-about*
:Coq SearchAbout {arg}
<leader>cs		Send the SearchAbout command to Coqtop. The first
			version uses {arg}, while the second uses the term
			under the cursor. Write the response to the Info panel.

						      *<leader>ch* *coqtail-check*
:Coq Check {arg}
<leader>ch		Send the Check command to Coqtop. The first version
			uses {arg}, while the second uses the term under the
			cursor. Write the response to the Info panel.

						      *<leader>ca* *coqtail-about*
:Coq About {arg}
<leader>ca		Send the About command to Coqtop. The first version
			uses {arg}, while the second uses the term under the
			cursor. Write the response to the Info panel.

						      *<leader>cp* *coqtail-print*
:Coq Print {arg}
<leader>cp		Send the Print command to Coqtop. The first version
			uses {arg}, while the second uses the term under the
			cursor. Write the response to the Info panel.

						     *<leader>cf* *coqtail-locate*
:Coq Locate {arg}
<leader>cf		Send the Locate command to Coqtop. The first version
			uses {arg}, while the second uses the term under the
			cursor. Write the response to the Info panel.

=============
Goal Focusing						    *coqtail-goal-focus*

						      *<leader>cgg* *:CoqGotoGoal*
						       *coqtail-goto-goal-start*
:[count]CoqGotoGoal
<count><leader>cgg	Scroll the goal panel to the start of goal [count]
			defaulting to the first goal. Use |g:coqtail_goal_lines|
			to decide which line to put at the bottom of the
			panel.

						     *<leader>cGG* *:CoqGotoGoal!*
							 *coqtail-goto-goal-end*
:[count]CoqGotoGoal!
<count><leader>cGG	Same as `:CoqGotoGoal` but put the last line of the
			goal at the bottom of the panel.

							   *g]* *:CoqGotoGoalNext*
						  *coqtail-goto-goal-next-start*
:CoqGotoGoalNext
g]			Scroll the goal panel to the start of the next goal.

							  *G]* *:CoqGotoGoalNext!*
						    *coqtail-goto-goal-next-end*
:CoqGotoGoalNext!
G]			Scroll the goal panel to the end of the next goal.

							   *g[* *:CoqGotoGoalPrev*
						  *coqtail-goto-goal-prev-start*
:CoqGotoGoalPrev
g[			Scroll the goal panel to the start of the previous
			goal.

							  *G[* *:CoqGotoGoalPrev!*
						    *coqtail-goto-goal-prev-end*
:CoqGotoGoalPrev!
G[			Scroll the goal panel to the end of the previous goal.

======================
Miscellaneous Commands						  *coqtail-misc*

					      *:CoqMakeMatch* *coqtail-make-match*
:CoqMakeMatch {arg}	Insert a "match" template for a given Inductive type.

=============
Configuration						 *coqtail-configuration*

				         *g:coqtail_coq_path* *b:coqtail_coq_path*
							      *coqtail-coq-path*
g:coqtail_coq_path
b:coqtail_coq_path	The path to search for the Coqtop binary. If
			|b:coqtail_coq_path| is empty then $PATH is used.
			|g:coqtail_coq_path| defaults to "" and
			|b:coqtail_coq_path| defaults to |g:coqtail_coq_path|.
			The global variable is checked only once when the .v
			file is first loaded, but the buffer-local variable is
			checked on every call to `:CoqStart`.

				       *g:coqtail_goal-lines* *coqtail-goal-lines*
g:coqtail_goal_lines	The number of lines from the start of a goal to
			display. Used by `:CoqGotoGoal`. Defaults to 5.

					     *b:coqtail_timeout* *coqtail-timeout*
b:coqtail_timeout	The time in seconds before a command sent to Coqtop
			will be interrupted. Prevents vim from getting stuck if
			Coqtop goes into an infinite loop. A value of 0
			disables the timeout. Defaults to 0. Coq can also be
			interrupted with CTRL-C.

				       *g:coqtail_project_name* *coq-project-file*
g:coqtail_project_name	The name of the Coq project file. Set to "_CoqProject"
			by default. When it is started, Coqtail searches for
			a file with this name starting from the current
			directory up to the root directory. If one is found it
			is parsed and the options are passed to Coqtop during
			`:CoqStart`.

							*b:coqtail_project_file*
b:coqtail_project_file	The path to the Coq project file. Set automatically if
			one is found during `:CoqStart`.

					    *g:coqtail_nomap* *coqtail-no-mapping*
g:coqtail_nomap		If true then don't set any default mappings for
			Coqtail	commands. Only specific mappings can also be
			overwritten by defining new mappings for the desired
			commands. The defaults will continue to be used for the
			rest.

					  *g:coqtail_nosyntax* *coqtail-no-syntax*
g:coqtail_nosyntax	If true then don't use the syntax script included with
			Coqtail.

					  *g:coqtail_noindent* *coqtail-no-indent*
g:coqtail_noindent	If true then don't use the indent script included with
			Coqtail.

							  *g:CoqtailHighlight()*
g:CoqtailHighlight()	Optional function to overwrite the default highlighting
			for CoqtailChecked and CoqtailSent. E.g.  >
		    function! g:CoqtailHighlight()
		      hi def CoqtailChecked ctermbg=19
		      hi def CoqtailSent ctermbg=62
		    endfunction
<
=========
Debugging							 *coqtail-debug*

			       *<leader>cd* *:CoqToggleDebug* *coqtail-toggle-debug*
:CoqToggleDebug
<leader>cd		Enable or disable logging of debugging statements to a
			file. Enabling creates a temporary file and displays
			the name in the info panel. The name is also stored in
			|b:coqtail_log_name|. Disabling and enabling again
			creates a new log file. Disabled initially.

					   *b:coqtail_log_name* *coqtail-log-name*
b:coqtail_log_name	The name of the debugging log file. Set automatically
			by enabling/disabling debugging with `:CoqToggleDebug`.
			Defaults to ''.

 vim:tw=78:ts=8:ft=help:norl:noet
